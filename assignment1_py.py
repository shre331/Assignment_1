# -*- coding: utf-8 -*-
"""Assignment1.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m2I5HLzs2GtU3oS9eh6ujP4N0GoS6SSs

Shreya D

Assignment1
         
1. Understanding Variables
     1a) Define a variable in Python. Provide an example of how to create a variable that stores your name.
     1b) What is the difference between a variable and a constant? Can we have constants in Python?

1a) In Python, a variable is a name given to a memory location that stores a values.
"""

name = "Shreya D"
print(name)

"""1b) What is the difference between a variable and a constant? Can we have constants in Python?

In programming, both variables and constants are used to store values.

A variable is a named storage location that holds a value that can change during the execution of a program. Variables are used to store and manipulate data, and their values can be reassigned or updated as needed.

A constant is a named value that cannot be changed once it is defined. Constants are used to store values that remain the same throughout the execution of a program, and their values are immutable.

Python does not contain any built-in concept of constants

2. Working with Different Data Types
   2a) Create variables of the following types in Python:
    1. Integer
    2. Float
    3. String
    4. Boolean
"""

score = 0
print("Score:", score)

print(type(score))

temperature = -5
balance = -1000
print("Temperature:", temperature)
print("Balance:", balance)

print(type(temperature))
print(type(balance))

pi = 3.145
print("Pi:",pi)

print(type(pi))

name = 'Shreya D'
print("Name:",name)

print(type(name))

a = 2
b = 5
is_lesser = a < b
print(is_lesser)

print(type(is_lesser))

"""2b) Write a Python script to display the type of each variable you created."""

score = 0
print("Score:", score)
type(score)

temperature = -5
balance = -1000
print("Temperature:", temperature)
print("Balance:", balance)
type(temperature)
type(balance)

pi = 3.145
print("Pi:",pi)
type(pi)

name = 'Shreya D'
print("Name:",name)
type(name)

a = 2
b = 5
is_lesser = a < b
print(is_lesser)
type(is_lesser)

"""3.Arithmetic Operators

a) Explain the following arithmetic operators with examples:
1. Addition (`+`)
2. Subtraction (`-`)
3. Multiplication (``)
4. Division (`/`)
5. Floor Division (`//`)
6. Modulus (`%`)
7. Exponentiation (``)

Addition
"""

a = 5
b = 3
result = a + b
print(result)

"""Subtraction"""

a = 5
b = 3
result = a - b
print(result)

"""Multiplication"""

a = 5
b = 3
result = a * b
print(result)

"""Division"""

a = 5
b = 3
result = a / b
print(result)

"""Floor Division"""

a = 5
b = 3
result = a // b
print(result)

"""Modulus"""

a = 5
b = 3
result = a % b
print(result)

"""Exponential"""

a = 5
b = 3
result = a ** b
print(result)

"""3b) Write a Python script to calculate the area of a rectangle using variables `length` and `width` with
values 5 and 10, respectively. Use the multiplication operator.
"""

length = 5
width = 10
area = length * width
print("The area of the rectangle is:", area)

"""4. Comparison and Logical Operators

a) Explain the following comparison operators with examples:
1. Equal to (`==`)
2. Not equal to (`!=`)
3. Greater than (`>`)
4. Less than (`<`)
5. Greater than or equal to (`>=`)
6. Less than or equal to (`<=`)
"""



"""1.Equal to operator"""

a = 5
b = 5
result = a == b
print(result)

"""Explanation:This code declares two integer variables a and b and assigns them the values 5 and 5, respectively. It then uses the Equal to (==) operator to check if a is equal to b and stores the result in the result variable. Finally, it prints the result.

2.Not equal to Operator
"""

a = 5
b = 8
result = a != b
print(result)

"""Expanation:This code declares two integer variables a and b and assigns them the values 5 and 8, respectively. It then uses the Not Equal to (!=) operator to check if a is not equal to b and stores the result in the result variable. Finally, it prints the result.

3.Greater than
"""

a = 5
b = 8
result = a > b
print(result)

"""Expanation:This code declares two integer variables a and b and assigns them the values 5 and 8, respectively. It then uses the greater than (>) operator to check if a is greater than b and stores the result in the result variable. Finally, it prints the result.

4.Less than
"""

a = 5
b = 8
result = a < b
print(result)

"""Expanation:This code declares two integer variables a and b and assigns them the values 5 and 8, respectively. It then uses the less than (<) operator to check if a is less than b and stores the result in the result variable. Finally, it prints the result.

5.Greater than or equal to
"""

a = 5
b = 8
result = a >= b
print(result)

"""Expanation:This code declares two integer variables a and b and assigns them the values 5 and 8, respectively. It then uses the greater than or equal to (>=) operator to check if a is greater than or equal to b and stores the result in the result variable. Finally, it prints the result.

6.Less than or equal to
"""

a = 5
b = 8
result = a <= b
print(result)

"""Expanation:This code declares two integer variables a and b and assigns them the values 5 and 8, respectively. It then uses the less than or equal to (<=) operator to check if a is less than or equal to b and stores the result in the result variable. Finally, it prints the result.

4b) Using logical operators (`and`, `or`, `not`), write a Python script that checks if a number is positive and even.
"""

num = 10
result = num > 0 and num % 2 == 0
print(num, " is positive and even")
print(result)

num = 10
if num > 0 and num % 2 == 0:
    print(f"{num} is a positive even number.")
else:
    print(f"{num} is not a positive even number.")

"""5.Type Casting in Python
a) What is type casting? Explain the difference between implicit and explicit type casting with
examples.

Type casting is a process of converting a value of one data type to another data type. This is also known as type conversion.
two types of casting: implicit and explicit.

Implicit type casting occurs automatically when the programming language encounters an operation that requires a different data type. This type of casting is done by the compiler or interpreter without the need for explicit instructions from the programmer.

Explicit type casting, on the other hand, is done manually by the programmer using casting functions.This type of casting is used when the programmer wants to explicitly convert a value to a specific data type.

Implicit type casting
"""

a = 2
b = 5
result = a+b
print(result)
print(type(result))

"""Explicit Type casting"""

num = int(123.45)
print(num)
print(type(num))

"""5b) Write a Python script that:
1. Converts a float to an integer.
2. Converts an integer to a string.
3. Converts a string to a float.

1.Converts a float to an integer.
"""

float_num = 3.14
int_num = int(float_num)
print(f"Float {float_num} converted to integer: {int_num}")

"""2.Converts an integer to a string."""

int_num = 3
str_num = str(int_num)
print(f"integer {int_num} converted to string: {str_num}")

"""3.Converts a string to a float."""

str_num = "3"
float_num = float(str_num)
print(f"string {str_num} converted to float: {float_num}")

"""6. Practical Exercise: Mini Calculator  
Write a Python script that asks the user to input two numbers and then:
1. Adds the two numbers and prints the result.
2. Subtracts the second number from the first and prints the result.
3. Multiplies the two numbers and prints the result.
4. Divides the first number by the second and prints the result (handle division by zero).
5. Converts the sum of the numbers to a string and prints the type of the result.
"""

num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))
sum_result = num1 + num2
print(f"The sum of {num1} and {num2} is {sum_result}")
diff_result = num1 - num2
print(f"The difference between {num1} and {num2} is {diff_result}")
product_result = num1 * num2
print(f"The product of the two numbers {num1} and {num2} is {product_result}")
division_result = num1 / num2
print(f"The division of the two numbers {num1} and {num2} is {division_result}")
print("Error: Division by zero is not allowed!")
sum_str = str(sum_result)
print("The sum as a string is:", sum_str)
print(f"The sum converted to a string is {sum_str} and the type is {type(sum_str)}")

